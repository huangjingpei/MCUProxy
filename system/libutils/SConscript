Import('*')

_env = env.Clone()
_env.Append(CPPFLAGS = '-DHAVE_SYS_UIO_H -DHAVE_ENDIAN_H -DHAVE_OFF64_T -DHAVE_PTHREADS -DHAVE_POSIX_FILEMAP ')
_env.Append(CPPFLAGS = "-DOS_PATH_SEPARATOR=\"'/'\" ")
_env.Append(CPPPATH = '#/system/include')
_env.Append(LIBPATH = 'lib')
_env['LIBS'] = ['c', 'rt', 'dl']

totalSources = '''
	BasicHashtable.cpp \
	BlobCache.cpp \
	Debug.cpp \
	FileMap.cpp \
	Flattenable.cpp \
	LinearTransform.cpp \
	Log.cpp \
	PropertyMap.cpp \
	RefBase.cpp \
	SharedBuffer.cpp \
	Static.cpp \
	StopWatch.cpp \
	String16.cpp \
	String8.cpp \
	StringArray.cpp \
	SystemClock.cpp \
	TextOutput.cpp \
	Threads.cpp \
	Timers.cpp \
	Tokenizer.cpp \
	Unicode.cpp \
	VectorImpl.cpp \
	WorkQueue.cpp \
	misc.cpp \
	Trace.cpp\
	BufferedTextOutput.cpp
'''

skipSources = '''
        CallStack.cpp \
	BasicHashtable.cpp \
	BlobCache.cpp \
	BufferedTextOutput.cpp \
	CallStack.cpp \
	Debug.cpp \
	FileMap.cpp \
	Flattenable.cpp \
	LinearTransform.cpp \
	Log.cpp \
	PropertyMap.cpp \
	RefBase.cpp \
	SharedBuffer.cpp \
	Static.cpp \
	StopWatch.cpp \
	String8.cpp \
	String16.cpp \
	StringArray.cpp \
	SystemClock.cpp \
	TextOutput.cpp \
	Threads.cpp \
	Timers.cpp \
	Tokenizer.cpp \
	Unicode.cpp \
	VectorImpl.cpp \
	WorkQueue.cpp \
	ZipFileCRO.cpp \
	ZipFileRO.cpp \
	ZipUtils.cpp \
	misc.cpp \
	Looper.cpp \
	Trace.cpp
'''

#all = _env.SharedLibrary('libutils.so', totalSources.split(), _LIBFLAGS=' -Wl,-Bsymbolic')


_myName='libutils'
objs = totalSources.split()
target = _env.SharedLibrary(_myName + '.so-dev', objs, _LIBFLAGS=' -Wl,-Bsymbolic')
objs.append(target)



target = _env.Command(_myName + '.so', _myName + '.so-dev', "$STRIP -g $SOURCE -o $TARGET")
objs.append(target)

Return('target')
